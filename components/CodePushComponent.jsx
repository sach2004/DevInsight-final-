import { useState, useEffect } from 'react';
import { ArrowUpRight, Check, X, Github, Loader } from 'lucide-react';

export default function CodePushComponent({ 
  code, 
  repositoryInfo, 
  onClose,
  language,
  context = {},
}) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);
  const [filePath, setFilePath] = useState('');
  const [isAutoDetecting, setIsAutoDetecting] = useState(true);
  const [commitMessage, setCommitMessage] = useState('');
  const [description, setDescription] = useState('Code generated by DevInsight');

  
  useEffect(() => {
    const detectPath = async () => {
      setIsAutoDetecting(true);
      
      try {
       
        const targetPath = extractFilePathFromContext(context);
        
        if (targetPath) {
          setFilePath(targetPath);
          setCommitMessage(`Update ${targetPath} via DevInsight`);
          setIsAutoDetecting(false);
          return;
        }
        
        
        const fileContext = extractFileContextFromConversation(context);
        
     
        const response = await fetch('/api/push-to-github', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            owner: repositoryInfo.owner.name,
            repo: repositoryInfo.name,
       
            content: "// This is just a probe request to detect file path",
            fileContext: fileContext || '',
            language: language,
            
            probe: true
          }),
        });
        
        const data = await response.json();
        
        if (data.suggestedPath) {
          setFilePath(data.suggestedPath);
          setCommitMessage(`Update ${data.suggestedPath} via DevInsight`);
        } else {
        
          const extension = getExtensionFromLanguage(language);
          const defaultPath = `devinsight-${Date.now().toString().slice(-6)}.${extension}`;
          setFilePath(defaultPath);
          setCommitMessage(`Add ${defaultPath} via DevInsight`);
        }
      } catch (error) {
        console.error('Error detecting file path:', error);
       
        const extension = getExtensionFromLanguage(language);
        const defaultPath = `devinsight-${Date.now().toString().slice(-6)}.${extension}`;
        setFilePath(defaultPath);
        setCommitMessage(`Add ${defaultPath} via DevInsight`);
      } finally {
        setIsAutoDetecting(false);
      }
    };
    
    detectPath();
  }, [context, language, repositoryInfo]);

 
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!filePath.trim()) {
      setError('File path is required');
      return;
    }
    
    setIsSubmitting(true);
    setError(null);
    
    try {
      const response = await fetch('/api/push-to-github', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          owner: repositoryInfo.owner.name,
          repo: repositoryInfo.name,
          path: filePath,
          content: code,
          message: commitMessage || `Update ${filePath} via DevInsight`,
          description: description,
          
          fileContext: extractFileContextFromConversation(context),
          language: language
        }),
      });
      
      const data = await response.json();
      
      if (!response.ok || !data.success) {
        throw new Error(data.error || 'Failed to push to GitHub');
      }
      
      setResult(data);
    } catch (error) {
      console.error('Error pushing to GitHub:', error);
      setError(error.message);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-xl font-bold flex items-center">
            <Github className="mr-2" size={20} />
            Push to GitHub
          </h3>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700"
          >
            <X size={20} />
          </button>
        </div>
        
        {result ? (
          <div className="text-center py-4">
            <div className="bg-green-100 text-green-800 p-4 rounded-lg mb-4 flex items-start">
              <Check className="mr-2 mt-1 flex-shrink-0" />
              <div>
                <p className="font-medium">Successfully created pull request!</p>
                <p className="text-sm mt-1">
                  Branch: {result.branchName}
                </p>
                <p className="text-sm">
                  File: {result.path}
                </p>
              </div>
            </div>
            
            <a
              href={result.pullRequestUrl}
              target="_blank"
              rel="noopener noreferrer"
              className="btn bg-[#FFC480] border-4 border-black shadow-[4px_4px_0px_0px_black] rounded-lg px-4 py-2 inline-flex items-center"
            >
              View Pull Request <ArrowUpRight size={16} className="ml-1" />
            </a>
            
            <button
              onClick={onClose}
              className="mt-4 ml-4 text-gray-600 hover:text-gray-800 underline"
            >
              Close
            </button>
          </div>
        ) : (
          <form onSubmit={handleSubmit}>
            <div className="mb-4">
              <label className="block text-gray-700 text-sm font-medium mb-1">
                Target File
              </label>
              
              {isAutoDetecting ? (
                <div className="flex items-center space-x-2 py-2">
                  <Loader size={16} className="animate-spin text-blue-500" />
                  <span className="text-gray-600">Detecting file path...</span>
                </div>
              ) : (
                <>
                  <input
                    type="text"
                    value={filePath}
                    onChange={(e) => setFilePath(e.target.value)}
                    placeholder="e.g., lib/utils.js"
                    className="border-4 border-black w-full rounded-lg p-2 shadow-[4px_4px_0px_0px_black]"
                    required
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    File path in the repository (auto-detected)
                  </p>
                </>
              )}
            </div>
            
            <div className="mb-4">
              <label className="block text-gray-700 text-sm font-medium mb-1">
                Commit Message
              </label>
              <input
                type="text"
                value={commitMessage}
                onChange={(e) => setCommitMessage(e.target.value)}
                placeholder="Update code via DevInsight"
                className="border-4 border-black w-full rounded-lg p-2 shadow-[4px_4px_0px_0px_black]"
              />
            </div>
            
            <div className="mb-4">
              <label className="block text-gray-700 text-sm font-medium mb-1">
                Pull Request Description
              </label>
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                className="border-4 border-black w-full rounded-lg p-2 shadow-[4px_4px_0px_0px_black]"
                rows="3"
              />
            </div>
            
            {error && (
              <div className="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-3 rounded">
                <p className="text-sm">{error}</p>
              </div>
            )}
            
            <div className="flex justify-end">
              <button
                type="button"
                onClick={onClose}
                className="mr-2 border border-gray-300 rounded-lg px-4 py-2 hover:bg-gray-100"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="btn bg-[#FFC480] border-4 border-black shadow-[4px_4px_0px_0px_black] rounded-lg px-4 py-2 flex items-center"
                disabled={isSubmitting || isAutoDetecting}
              >
                {isSubmitting ? (
                  <>
                    <div className="animate-spin h-4 w-4 mr-2 border-b-2 border-black"></div>
                    Pushing...
                  </>
                ) : (
                  <>
                    <Github className="mr-1" size={16} />
                    Create PR
                  </>
                )}
              </button>
            </div>
          </form>
        )}
      </div>
    </div>
  );
}

/**

 * @param {Object} context 
 * @returns {string|null} 
 */
function extractFilePathFromContext(context) {
  if (!context || !context.messages) return null;
  
  
  const recentMessages = context.messages.slice(-5).reverse();
  
  for (const message of recentMessages) {
    const content = message.content || '';
    
    
    const filePathPatterns = [
     
      /(?:file|path|in|to|of|update|modify|edit|change)[\s:]+['"]?([\w\/\.-]+\.\w+)['"]?/i,
      
      /['"]?([\w\/\.-]+\.\w+)['"]?(?:\s+file)/i,
      
      /['"]?((?:\.\/)?(?:[\w-]+\/)+[\w-]+\.\w+)['"]?/
    ];
    
    for (const pattern of filePathPatterns) {
      const match = content.match(pattern);
      if (match && match[1]) {
        return match[1];
      }
    }
  }
  
  return null;
}

/**
 * @param {Object} context
 * @returns {string|null} 
 */
function extractFileContextFromConversation(context) {
  if (!context || !context.messages) return null;
  
  
  const recentMessages = context.messages.slice(-5).reverse();
  
  for (const message of recentMessages) {
    const content = message.content || '';
    
    
    const contextPatterns = [
     
      /file[\s:]+['"]?([\w-]+(?:\.\w+)?)['"]?/i,
      
      /component[\s:]+['"]?([\w-]+(?:Component)?)['"]?/i,
     
      /(route|router|api|controller|service|model|view|component|config|util|helper)s?(?:\s+file)?[\s:]+['"]?([\w-]+)['"]?/i,
      
      /implement[\s:]+['"]?([\w-]+)['"]?/i
    ];
    
    for (const pattern of contextPatterns) {
      const match = content.match(pattern);
      if (match) {
        return match[1] || match[2] || null;
      }
    }
  }
  
  return null;
}

/**

 * @param {string} language 
 * @returns {string} 
 */
function getExtensionFromLanguage(language) {
  if (!language) return 'js';
  
  const langMap = {
    'javascript': 'js',
    'js': 'js',
    'typescript': 'ts',
    'ts': 'ts',
    'jsx': 'jsx',
    'tsx': 'tsx',
    'python': 'py',
    'py': 'py',
    'java': 'java',
    'cpp': 'cpp',
    'c': 'c',
    'csharp': 'cs',
    'cs': 'cs',
    'go': 'go',
    'rust': 'rs',
    'ruby': 'rb',
    'php': 'php',
    'html': 'html',
    'css': 'css',
    'json': 'json',
    'markdown': 'md',
    'md': 'md',
    'yaml': 'yml',
    'yml': 'yml',
    'shell': 'sh',
    'bash': 'sh',
    'sql': 'sql',
    'swift': 'swift',
    'kotlin': 'kt',
    'text': 'txt'
  };
  
  return langMap[language.toLowerCase()] || 'js';
}