import GitHubPushService from '../../lib/githubPush';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const {
    owner,
    repo,
    path,
    targetPath,
    content,
    message,
    description,
    fileContext,
    language
  } = req.body;


  if (!owner || !repo || !content) {
    return res.status(400).json({
      success: false,
      error: 'Missing required fields: owner, repo, and content are required'
    });
  }

  try {
  
    const githubToken = process.env.GITHUB_TOKEN;
    
    if (!githubToken) {
      return res.status(500).json({
        success: false,
        error: 'GitHub token not configured on the server'
      });
    }


    const githubService = new GitHubPushService(githubToken);
    
  
    const timestamp = new Date().getTime();
    const branchName = `devinsight-${timestamp}`;
    
  
    let filePath = path;
    
   
    if (!filePath) {
     
      if (targetPath) {
        filePath = targetPath;
      } 
     
      else if (fileContext) {
  
        filePath = await githubService.findFilePath(owner, repo, fileContext);
        
     
        if (!filePath) {
         
          const filename = fileContext.includes('.') 
            ? fileContext 
            : `${fileContext}.${getExtensionFromLanguage(language)}`;
            
          filePath = await githubService.suggestFilePath(
            owner, 
            repo, 
            filename, 
            language || 'js'
          );
        }
      } 
     
      else {
        const extension = getExtensionFromLanguage(language);
        const filename = `devinsight-${timestamp}.${extension}`;
        filePath = await githubService.suggestFilePath(
          owner, 
          repo, 
          filename, 
          language || 'js'
        );
      }
    }
    
    if (!filePath) {
      return res.status(400).json({
        success: false,
        error: 'Unable to determine appropriate file path'
      });
    }
    

    const commitMessage = message || `Update ${filePath} via DevInsight`;
    
 
    const prTitle = `DevInsight: ${commitMessage}`;
    
  
    const prBody = description || 
      `This code was generated by DevInsight AI assistant.\n\n` +
      `File: \`${filePath}\`\n\n` +
      `Please review this code before merging.`;

   
    const result = await githubService.pushCodeWithPR({
      owner,
      repo,
      path: filePath,
      content,
      message: commitMessage,
      branchName,
      prTitle,
      prBody
    });

    if (result.success) {
      return res.status(200).json({
        success: true,
        pullRequestUrl: result.pullRequestUrl,
        branchName: result.branchName,
        path: result.path
      });
    } else {
      return res.status(500).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    console.error('Error pushing to GitHub:', error);
    
    return res.status(500).json({
      success: false,
      error: `Failed to push to GitHub: ${error.message}`
    });
  }
}

/**
 * @param {string} language 
 * @returns {string} 
 */
function getExtensionFromLanguage(language) {
  if (!language) return 'js';
  
  const langMap = {
    'javascript': 'js',
    'js': 'js',
    'typescript': 'ts',
    'ts': 'ts',
    'jsx': 'jsx',
    'tsx': 'tsx',
    'python': 'py',
    'py': 'py',
    'java': 'java',
    'cpp': 'cpp',
    'c': 'c',
    'csharp': 'cs',
    'cs': 'cs',
    'go': 'go',
    'rust': 'rs',
    'ruby': 'rb',
    'php': 'php',
    'html': 'html',
    'css': 'css',
    'json': 'json',
    'markdown': 'md',
    'md': 'md',
    'yaml': 'yml',
    'yml': 'yml',
    'shell': 'sh',
    'bash': 'sh',
    'sql': 'sql',
    'swift': 'swift',
    'kotlin': 'kt',
    'text': 'txt'
  };
  
  return langMap[language.toLowerCase()] || 'js';
}